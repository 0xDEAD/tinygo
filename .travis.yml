language: go

matrix:
  include:
  #- dist: xenial
  #  go: "1.11"
  #- os: osx
  #  go: "1.11"
  #  env: PATH="/usr/local/opt/llvm/bin:$PATH"
  - os: windows
    go: "1.11"
    env: GOBIN="$GOPATH/bin"
    #env: GOBIN="/usr/local/opt/llvm/bin:$PATH"
    before_install:
    - choco upgrade llvm -y

addons:
  apt:
    sources:
    - sourceline: 'ppa:ubuntu-toolchain-r'
    - sourceline: 'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-7 main'
      key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
    packages:
    - llvm-7-dev
    - clang-7
    - libclang-7-dev
    - gcc-arm-linux-gnueabi
    - binutils-arm-none-eabi
    - libc6-dev-armel-cross
    - gcc-aarch64-linux-gnu
    - libc6-dev-arm64-cross
    - qemu-system-arm
    - qemu-user
    - gcc-avr
    - avr-libc
  homebrew:
    update: true
    taps: ArmMbed/homebrew-formulae
    packages:
    - llvm@7
    - qemu
    - arm-none-eabi-gcc

install:
  - ls -l "/c/Program Files/LLVM"
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then mkdir -p /Users/travis/gopath/bin; fi
  - if [ "$TRAVIS_OS_NAME" == "windows" ]; then mkdir -p "$GOBIN"; echo $GOBIN; fi
  - curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
  - dep ensure --vendor-only

script:
  - ls -l "/c/Program Files/LLVM"
  - ls -l "/c/Program Files/LLVM/bin"
  - ls -l "/c/Program Files/LLVM/include"
  - ls -l "/c/Program Files/LLVM/include/clang-c"
  - ls -l "/c/Program Files/LLVM/lib"
  - ls -l "/c/Program Files/LLVM/lib/clang"
  - ls -l "/c/Program Files/LLVM/lib/clang/7.0.0"
  - ls -l "/c/Program Files/LLVM/lib/clang/7.0.0/lib"
  - ls -l "/c/Program Files/LLVM/lib/clang/7.0.0/lib/windows"
  - find "/c/Program Files/LLVM" -name Analysis.h
  - go install github.com/tinygo-org/tinygo
  - go test -v .
  - make gen-device
  - tinygo build -size short -o blinky1.nrf.elf    -target=pca10040     examples/blinky1
  - tinygo build -size short -o blinky2.nrf.elf    -target=pca10040     examples/blinky2
  - tinygo build             -o blinky2                                 examples/blinky2 # TODO: re-enable -size flag with MachO support
  - tinygo build -size short -o test.nrf.elf       -target=pca10040     examples/test
  - tinygo build -size short -o blinky1.nrf51.elf  -target=microbit     examples/echo
  - tinygo build -size short -o test.nrf.elf       -target=nrf52840-mdk examples/blinky1
  - tinygo build -size short -o blinky1.nrf51d.elf -target=pca10031     examples/blinky1
  - tinygo build -size short -o blinky1.stm32.elf  -target=bluepill     examples/blinky1
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then tinygo build -size short -o blinky1.avr.elf    -target=arduino      examples/blinky1; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then tinygo build -size short -o blinky1.avr.elf    -target=digispark    examples/blinky1; fi
  - tinygo build -size short -o blinky1.reel.elf   -target=reelboard    examples/blinky1
  - tinygo build -size short -o blinky2.reel.elf   -target=reelboard    examples/blinky2
  - tinygo build -size short -o blinky1.pca10056.elf    -target=pca10056     examples/blinky1
  - tinygo build -size short -o blinky2.pca10056.elf    -target=pca10056     examples/blinky2
  - tinygo build -size short -o blinky1.samd21.elf    -target=itsybitsy-m0     examples/blinky1
