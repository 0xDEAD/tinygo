// Automatically generated file. DO NOT EDIT.
// Generated by gen-device.py from ATmega8515.atdf, see http://packs.download.atmel.com/

// +build avr,atmega8515

// Device information for the ATmega8515.
//
package avr

// Magic type name for the compiler.
type __reg uint8

// Export this magic type name.
type RegValue = __reg

// Some information about this device.
const (
	DEVICE = "ATmega8515"
	ARCH   = "AVR8"
	FAMILY = "megaAVR"
)

// Interrupts
const (
	IRQ_RESET        = 0  // External Reset, Power-on Reset and Watchdog Reset
	IRQ_INT0         = 1  // External Interrupt Request 0
	IRQ_INT1         = 2  // External Interrupt Request 1
	IRQ_TIMER1_CAPT  = 3  // Timer/Counter1 Capture Event
	IRQ_TIMER1_COMPA = 4  // Timer/Counter1 Compare Match A
	IRQ_TIMER1_COMPB = 5  // Timer/Counter1 Compare MatchB
	IRQ_TIMER1_OVF   = 6  // Timer/Counter1 Overflow
	IRQ_TIMER0_OVF   = 7  // Timer/Counter0 Overflow
	IRQ_SPI_STC      = 8  // Serial Transfer Complete
	IRQ_USART_RX     = 9  // USART, Rx Complete
	IRQ_USART_UDRE   = 10 // USART Data Register Empty
	IRQ_USART_TX     = 11 // USART, Tx Complete
	IRQ_ANA_COMP     = 12 // Analog Comparator
	IRQ_INT2         = 13 // External Interrupt Request 2
	IRQ_TIMER0_COMP  = 14 // Timer 0 Compare Match
	IRQ_EE_RDY       = 15 // EEPROM Ready
	IRQ_SPM_RDY      = 16 // Store Program Memory Ready
	IRQ_max          = 16 // Highest interrupt number on this device.
)

// Peripherals
var (
	// Fuses
	FUSE = struct {
		HIGH __reg
		LOW  __reg
	}{
		HIGH: 0x1,
		LOW:  0x0,
	}

	// Lockbits
	LOCKBIT = struct {
		LOCKBIT __reg
	}{
		LOCKBIT: 0x0,
	}

	// Analog Comparator
	AC = struct {
		ACSR __reg
	}{
		ACSR: 0x28, // Analog Comparator Control And Status Register
	}

	// USART
	USART = struct {
		UDR   __reg
		UCSRA __reg
		UCSRB __reg
		UCSRC __reg
		UBRRH __reg
		UBRRL __reg
	}{
		UDR:   0x2c, // USART I/O Data Register
		UCSRA: 0x2b, // USART Control and Status Register A
		UCSRB: 0x2a, // USART Control and Status Register B
		UCSRC: 0x40, // USART Control and Status Register C
		UBRRH: 0x40, // USART Baud Rate Register High Byte
		UBRRL: 0x29, // USART Baud Rate Register Low Byte
	}

	// Serial Peripheral Interface
	SPI = struct {
		SPDR __reg
		SPSR __reg
		SPCR __reg
	}{
		SPDR: 0x2f, // SPI Data Register
		SPSR: 0x2e, // SPI Status Register
		SPCR: 0x2d, // SPI Control Register
	}

	// CPU Registers
	CPU = struct {
		SREG   __reg
		SPL    __reg
		SPH    __reg
		EMCUCR __reg
		MCUCR  __reg
		MCUCSR __reg
		OSCCAL __reg
		SPMCR  __reg
		SFIOR  __reg
	}{
		SREG:   0x5f, // Status Register
		SPL:    0x5d, // Stack Pointer
		SPH:    0x5d, // Stack Pointer
		EMCUCR: 0x56, // Extended MCU Control Register
		MCUCR:  0x55, // MCU Control Register
		MCUCSR: 0x54, // MCU Control And Status Register
		OSCCAL: 0x24, // Oscillator Calibration Value
		SPMCR:  0x57, // Store Program Memory Control Register
		SFIOR:  0x50, // Special Function IO Register
	}

	// External Interrupts
	EXINT = struct {
		GICR __reg
		GIFR __reg
	}{
		GICR: 0x5b, // General Interrupt Control Register
		GIFR: 0x5a, // General Interrupt Flag Register
	}

	// Watchdog Timer
	WDT = struct {
		WDTCR __reg
	}{
		WDTCR: 0x41, // Watchdog Timer Control Register
	}

	// Timer/Counter, 8-bit
	TC8 = struct {
		TCCR0 __reg
		TCNT0 __reg
		OCR0  __reg
	}{
		TCCR0: 0x53, // Timer/Counter 0 Control Register
		TCNT0: 0x52, // Timer/Counter 0 Register
		OCR0:  0x51, // Timer/Counter 0 Output Compare Register
	}

	// Timer/Counter, 16-bit
	TC16 = struct {
		TCCR1A __reg
		TCCR1B __reg
		TCNT1L __reg
		TCNT1H __reg
		OCR1AL __reg
		OCR1AH __reg
		OCR1BL __reg
		OCR1BH __reg
		ICR1L  __reg
		ICR1H  __reg
	}{
		TCCR1A: 0x4f, // Timer/Counter1 Control Register A
		TCCR1B: 0x4e, // Timer/Counter1 Control Register B
		TCNT1L: 0x4c, // Timer/Counter1  Bytes
		TCNT1H: 0x4c, // Timer/Counter1  Bytes
		OCR1AL: 0x4a, // Timer/Counter1 Output Compare Register A  Bytes
		OCR1AH: 0x4a, // Timer/Counter1 Output Compare Register A  Bytes
		OCR1BL: 0x48, // Timer/Counter1 Output Compare Register B  Bytes
		OCR1BH: 0x48, // Timer/Counter1 Output Compare Register B  Bytes
		ICR1L:  0x44, // Timer/Counter1 Input Capture Register  Bytes
		ICR1H:  0x44, // Timer/Counter1 Input Capture Register  Bytes
	}

	// I/O Port
	PORT = struct {
		PORTA __reg
		DDRA  __reg
		PINA  __reg
		PORTB __reg
		DDRB  __reg
		PINB  __reg
		PORTC __reg
		DDRC  __reg
		PINC  __reg
		PORTD __reg
		DDRD  __reg
		PIND  __reg
		PORTE __reg
		DDRE  __reg
		PINE  __reg
	}{
		PORTA: 0x3b, // Port A Data Register
		DDRA:  0x3a, // Port A Data Direction Register
		PINA:  0x39, // Port A Input Pins
		PORTB: 0x38, // Port B Data Register
		DDRB:  0x37, // Port B Data Direction Register
		PINB:  0x36, // Port B Input Pins
		PORTC: 0x35, // Port C Data Register
		DDRC:  0x34, // Port C Data Direction Register
		PINC:  0x33, // Port C Input Pins
		PORTD: 0x32, // Port D Data Register
		DDRD:  0x31, // Port D Data Direction Register
		PIND:  0x30, // Port D Input Pins
		PORTE: 0x27, // Port E Data Register
		DDRE:  0x26, // Port E Data Direction Register
		PINE:  0x25, // Port E Input Pins
	}

	// EEPROM
	EEPROM = struct {
		EEARL __reg
		EEARH __reg
		EEDR  __reg
		EECR  __reg
	}{
		EEARL: 0x3e, // EEPROM Address Register  Bytes
		EEARH: 0x3e, // EEPROM Address Register  Bytes
		EEDR:  0x3d, // EEPROM Data Register
		EECR:  0x3c, // EEPROM Control Register
	}
)

// Bitfields for FUSE: Fuses
const (
	// HIGH
	HIGH_S8515C  = 0x80 // AT90S4414/8515 compatibility mode
	HIGH_WDTON   = 0x40 // Watch-dog Timer always on
	HIGH_SPIEN   = 0x20 // Serial program downloading (SPI) enabled
	HIGH_EESAVE  = 0x8  // Preserve EEPROM through the Chip Erase cycle
	HIGH_BOOTSZ  = 0x6  // Select Boot Size
	HIGH_BOOTRST = 0x1  // Boot Reset vector Enabled
	HIGH_CKOPT   = 0x10 // CKOPT fuse (operation dependent of CKSEL fuses)]

	// LOW
	LOW_BODLEVEL  = 0x80 // Brownout detector trigger level
	LOW_BODEN     = 0x40 // Brown-out detection enabled
	LOW_SUT_CKSEL = 0x3f // Select Clock Source
)

// Bitfields for LOCKBIT: Lockbits
const (
	// LOCKBIT
	LOCKBIT_LB   = 0x3  // Memory Lock
	LOCKBIT_BLB0 = 0xc  // Boot Loader Protection Mode
	LOCKBIT_BLB1 = 0x30 // Boot Loader Protection Mode
)

// Bitfields for AC: Analog Comparator
const (
	// ACSR: Analog Comparator Control And Status Register
	ACSR_ACD  = 0x80 // Analog Comparator Disable
	ACSR_ACBG = 0x40 // Analog Comparator Bandgap Select
	ACSR_ACO  = 0x20 // Analog Compare Output
	ACSR_ACI  = 0x10 // Analog Comparator Interrupt Flag
	ACSR_ACIE = 0x8  // Analog Comparator Interrupt Enable
	ACSR_ACIC = 0x4  // Analog Comparator Input Capture Enable
	ACSR_ACIS = 0x3  // Analog Comparator Interrupt Mode Select bits
)

// Bitfields for USART: USART
const (
	// UCSRA: USART Control and Status Register A
	UCSRA_RXC  = 0x80 // USART Receive Complete
	UCSRA_TXC  = 0x40 // USART Transmitt Complete
	UCSRA_UDRE = 0x20 // USART Data Register Empty
	UCSRA_FE   = 0x10 // Framing Error
	UCSRA_DOR  = 0x8  // Data overRun
	UCSRA_UPE  = 0x4  // Parity Error
	UCSRA_U2X  = 0x2  // Double the USART transmission speed
	UCSRA_MPCM = 0x1  // Multi-processor Communication Mode

	// UCSRB: USART Control and Status Register B
	UCSRB_RXCIE = 0x80 // RX Complete Interrupt Enable
	UCSRB_TXCIE = 0x40 // TX Complete Interrupt Enable
	UCSRB_UDRIE = 0x20 // USART Data register Empty Interrupt Enable
	UCSRB_RXEN  = 0x10 // Receiver Enable
	UCSRB_TXEN  = 0x8  // Transmitter Enable
	UCSRB_UCSZ2 = 0x4  // Character Size Bit 2
	UCSRB_RXB8  = 0x2  // Receive Data Bit 8
	UCSRB_TXB8  = 0x1  // Transmit Data Bit 8

	// UCSRC: USART Control and Status Register C
	UCSRC_URSEL = 0x80 // Register Select
	UCSRC_UMSEL = 0x40 // USART Mode Select
	UCSRC_UPM   = 0x30 // Parity Mode Bits
	UCSRC_USBS  = 0x8  // Stop Bit Select
	UCSRC_UCSZ  = 0x6  // Character Size Bits
	UCSRC_UCPOL = 0x1  // Clock Polarity

	// UBRRH: USART Baud Rate Register High Byte
	UBRRH_URSEL = 0x80 // Register Select
	UBRRH_UBRR1 = 0xc  // USART Baud Rate Register bit 11
	UBRRH_UBRR  = 0x3  // USART Baud Rate Register bits
)

// Bitfields for SPI: Serial Peripheral Interface
const (
	// SPSR: SPI Status Register
	SPSR_SPIF  = 0x80 // SPI Interrupt Flag
	SPSR_WCOL  = 0x40 // Write Collision Flag
	SPSR_SPI2X = 0x1  // Double SPI Speed Bit

	// SPCR: SPI Control Register
	SPCR_SPIE = 0x80 // SPI Interrupt Enable
	SPCR_SPE  = 0x40 // SPI Enable
	SPCR_DORD = 0x20 // Data Order
	SPCR_MSTR = 0x10 // Master/Slave Select
	SPCR_CPOL = 0x8  // Clock polarity
	SPCR_CPHA = 0x4  // Clock Phase
	SPCR_SPR  = 0x3  // SPI Clock Rate Selects
)

// Bitfields for CPU: CPU Registers
const (
	// SREG: Status Register
	SREG_I = 0x80 // Global Interrupt Enable
	SREG_T = 0x40 // Bit Copy Storage
	SREG_H = 0x20 // Half Carry Flag
	SREG_S = 0x10 // Sign Bit
	SREG_V = 0x8  // Two's Complement Overflow Flag
	SREG_N = 0x4  // Negative Flag
	SREG_Z = 0x2  // Zero Flag
	SREG_C = 0x1  // Carry Flag

	// EMCUCR: Extended MCU Control Register
	EMCUCR_SM0   = 0x80 // Sleep Mode Select Bit 0
	EMCUCR_SRL   = 0x70 // Wait State Selector Limit bits
	EMCUCR_SRW0  = 0xc  // Wait State Select Bits for Lower Sector, bits
	EMCUCR_SRW11 = 0x2  // Wait State Select Bits for Upper Sector, bit 1
	EMCUCR_ISC2  = 0x1  // Interrupt Sense Control 2

	// MCUCR: MCU Control Register
	MCUCR_SRE   = 0x80 // External SRAM/XMEM Enable
	MCUCR_SRW10 = 0x40 // Wait State Select Bits for Upper Sector, bit 0
	MCUCR_SE    = 0x20 // Sleep Enable
	MCUCR_SM1   = 0x10 // Sleep Mode Select Bit 1
	MCUCR_ISC1  = 0xc  // Interrupt Sense Control 1 Bits
	MCUCR_ISC0  = 0x3  // Interrupt Sense Control 0 Bits

	// MCUCSR: MCU Control And Status Register
	MCUCSR_SM2   = 0x20 // Sleep Mode Select Bit 2
	MCUCSR_WDRF  = 0x8  // Watchdog Reset Flag
	MCUCSR_BORF  = 0x4  // Brown-out Reset Flag
	MCUCSR_EXTRF = 0x2  // External Reset Flag
	MCUCSR_PORF  = 0x1  // Power-on reset flag

	// OSCCAL: Oscillator Calibration Value
	OSCCAL_OSCCAL = 0xff // Oscillator Calibration

	// SPMCR: Store Program Memory Control Register
	SPMCR_SPMIE  = 0x80 // SPM Interrupt Enable
	SPMCR_RWWSB  = 0x40 // Read-While-Write Section Busy
	SPMCR_RWWSRE = 0x10 // Read-While-Write Section Read Enable
	SPMCR_BLBSET = 0x8  // Boot Lock Bit Set
	SPMCR_PGWRT  = 0x4  // Page Write
	SPMCR_PGERS  = 0x2  // Page Erase
	SPMCR_SPMEN  = 0x1  // Store Program Memory Enable

	// SFIOR: Special Function IO Register
	SFIOR_XMBK  = 0x40 // External Memory Bus Keeper Enable
	SFIOR_XMM   = 0x38 // External Memory High Mask Bits
	SFIOR_PUD   = 0x4  // Pull-up Disable
	SFIOR_PSR10 = 0x1  // Prescaler Reset Timer / Counter 1 and Timer / Counter 0
)

// Bitfields for EXINT: External Interrupts
const (
	// GICR: General Interrupt Control Register
	GICR_INT0  = 0x40 // External Interrupt Request 0 Enable
	GICR_INT1  = 0x80 // External Interrupt Request 1 Enable
	GICR_INT2  = 0x20 // External Interrupt Request 2 Enable
	GICR_IVSEL = 0x2  // Interrupt Vector Select
	GICR_IVCE  = 0x1  // Interrupt Vector Change Enable

	// GIFR: General Interrupt Flag Register
	GIFR_INTF  = 0xc0 // External Interrupt Flags
	GIFR_INTF2 = 0x20 // External Interrupt Flag 2
)

// Bitfields for WDT: Watchdog Timer
const (
	// WDTCR: Watchdog Timer Control Register
	WDTCR_WDCE = 0x10 // Watchdog Change Enable
	WDTCR_WDE  = 0x8  // Watch Dog Enable
	WDTCR_WDP  = 0x7  // Watch Dog Timer Prescaler bits
)

// Bitfields for TC8: Timer/Counter, 8-bit
const (
	// TCCR0: Timer/Counter 0 Control Register
	TCCR0_FOC0  = 0x80 // Force Output Compare
	TCCR0_WGM00 = 0x40 // Waveform Generation Mode 0
	TCCR0_COM0  = 0x30 // Compare Match Output Modes
	TCCR0_WGM01 = 0x8  // Waveform Generation Mode 1
	TCCR0_CS0   = 0x7  // Clock Selects
)

// Bitfields for TC16: Timer/Counter, 16-bit
const (
	// TCCR1A: Timer/Counter1 Control Register A
	TCCR1A_COM1A = 0xc0 // Compare Output Mode 1A, bits
	TCCR1A_COM1B = 0x30 // Compare Output Mode 1B, bits
	TCCR1A_FOC1A = 0x8  // Force Output Compare for Channel A
	TCCR1A_FOC1B = 0x4  // Force Output Compare for Channel B
	TCCR1A_WGM1  = 0x3  // Pulse Width Modulator Select Bits

	// TCCR1B: Timer/Counter1 Control Register B
	TCCR1B_ICNC1 = 0x80 // Input Capture 1 Noise Canceler
	TCCR1B_ICES1 = 0x40 // Input Capture 1 Edge Select
	TCCR1B_WGM1  = 0x18 // Pulse Width Modulator Select Bits
	TCCR1B_CS1   = 0x7  // Clock Select1 bits
)

// Bitfields for EEPROM: EEPROM
const (
	// EECR: EEPROM Control Register
	EECR_EERIE = 0x8 // EEPROM Ready Interrupt Enable
	EECR_EEMWE = 0x4 // EEPROM Master Write Enable
	EECR_EEWE  = 0x2 // EEPROM Write Enable
	EECR_EERE  = 0x1 // EEPROM Read Enable
)
