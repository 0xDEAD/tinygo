// Automatically generated file. DO NOT EDIT.
// Generated by gen-device.py from ATmega406.atdf, see http://packs.download.atmel.com/

// +build avr,atmega406

// Device information for the ATmega406.
//
package avr

// Magic type name for the compiler.
type __reg uint8

// Export this magic type name.
type RegValue = __reg

// Some information about this device.
const (
	DEVICE = "ATmega406"
	ARCH   = "AVR8"
	FAMILY = "megaAVR"
)

// Interrupts
const (
	IRQ_RESET         = 0  // External Pin, Power-on Reset, Brown-out Reset and Watchdog Reset
	IRQ_BPINT         = 1  // Battery Protection Interrupt
	IRQ_INT0          = 2  // External Interrupt Request 0
	IRQ_INT1          = 3  // External Interrupt Request 1
	IRQ_INT2          = 4  // External Interrupt Request 2
	IRQ_INT3          = 5  // External Interrupt Request 3
	IRQ_PCINT0        = 6  // Pin Change Interrupt 0
	IRQ_PCINT1        = 7  // Pin Change Interrupt 1
	IRQ_WDT           = 8  // Watchdog Timeout Interrupt
	IRQ_WAKE_UP       = 9  // Wakeup timer overflow
	IRQ_TIM1_COMP     = 10 // Timer/Counter 1 Compare Match
	IRQ_TIM1_OVF      = 11 // Timer/Counter 1 Overflow
	IRQ_TIM0_COMPA    = 12 // Timer/Counter0 Compare A Match
	IRQ_TIM0_COMPB    = 13 // Timer/Counter0 Compare B Match
	IRQ_TIM0_OVF      = 14 // Timer/Counter0 Overflow
	IRQ_TWI_BUS_CD    = 15 // Two-Wire Bus Connect/Disconnect
	IRQ_TWI           = 16 // Two-Wire Serial Interface
	IRQ_VADC          = 17 // Voltage ADC Conversion Complete
	IRQ_CCADC_CONV    = 18 // Coulomb Counter ADC Conversion Complete
	IRQ_CCADC_REG_CUR = 19 // Coloumb Counter ADC Regular Current
	IRQ_CCADC_ACC     = 20 // Coloumb Counter ADC Accumulator
	IRQ_EE_READY      = 21 // EEPROM Ready
	IRQ_SPM_READY     = 22 // Store Program Memory Ready
	IRQ_max           = 22 // Highest interrupt number on this device.
)

// Peripherals
var (
	// Fuses
	FUSE = struct {
		HIGH __reg
		LOW  __reg
	}{
		HIGH: 0x1,
		LOW:  0x0,
	}

	// Lockbits
	LOCKBIT = struct {
		LOCKBIT __reg
	}{
		LOCKBIT: 0x0,
	}

	// Analog-to-Digital Converter
	ADC = struct {
		VADMUX __reg
		VADCL  __reg
		VADCH  __reg
		VADCSR __reg
	}{
		VADMUX: 0x7c, // The VADC multiplexer Selection Register
		VADCL:  0x78, // VADC Data Register  Bytes
		VADCH:  0x78, // VADC Data Register  Bytes
		VADCSR: 0x7a, // The VADC Control and Status register
	}

	// External Interrupts
	EXINT = struct {
		EICRA  __reg
		EIMSK  __reg
		EIFR   __reg
		PCICR  __reg
		PCIFR  __reg
		PCMSK1 __reg
		PCMSK0 __reg
	}{
		EICRA:  0x69, // External Interrupt Control Register
		EIMSK:  0x3d, // External Interrupt Mask Register
		EIFR:   0x3c, // External Interrupt Flag Register
		PCICR:  0x68, // Pin Change Interrupt Control Register
		PCIFR:  0x3b, // Pin Change Interrupt Flag Register
		PCMSK1: 0x6c, // Pin Change Enable Mask Register 1
		PCMSK0: 0x6b, // Pin Change Enable Mask Register 0
	}

	// Timer/Counter, 16-bit
	TC16 = struct {
		TCCR1B __reg
		TCNT1L __reg
		TCNT1H __reg
		OCR1AL __reg
		OCR1AH __reg
		TIMSK1 __reg
		TIFR1  __reg
		GTCCR  __reg
	}{
		TCCR1B: 0x81, // Timer/Counter1 Control Register B
		TCNT1L: 0x84, // Timer Counter 1  Bytes
		TCNT1H: 0x84, // Timer Counter 1  Bytes
		OCR1AL: 0x88, // Output Compare Register 1A Low byte
		OCR1AH: 0x89, // Output Compare Register 1A High byte
		TIMSK1: 0x6f, // Timer/Counter Interrupt Mask Register
		TIFR1:  0x36, // Timer/Counter Interrupt Flag register
		GTCCR:  0x43, // General Timer/Counter Control Register
	}

	// Wakeup Timer
	WAKEUP_TIMER = struct {
		WUTCSR __reg
	}{
		WUTCSR: 0x62, // Wake-up Timer Control Register
	}

	// Battery Protection
	BATTERY_PROTECTION = struct {
		BPPLR __reg
		BPCR  __reg
		CBPTR __reg
		BPOCD __reg
		BPSCD __reg
		BPDUV __reg
		BPIR  __reg
	}{
		BPPLR: 0xf8, // Battery Protection Parameter Lock Register
		BPCR:  0xf7, // Battery Protection Control Register
		CBPTR: 0xf6, // Current Battery Protection Timing Register
		BPOCD: 0xf5, // Battery Protection OverCurrent Detection Level Register
		BPSCD: 0xf4, // Battery Protection Short-Circuit Detection Level Register
		BPDUV: 0xf3, // Battery Protection Deep Under Voltage Register
		BPIR:  0xf2, // Battery Protection Interrupt Register
	}

	// FET Control
	FET = struct {
		FCSR __reg
	}{
		FCSR: 0xf0,
	}

	// Coulomb Counter
	COULOMB_COUNTER = struct {
		CADCSRA __reg
		CADCSRB __reg
		CADICL  __reg
		CADICH  __reg
		CADAC3  __reg
		CADAC2  __reg
		CADAC1  __reg
		CADAC0  __reg
		CADRCC  __reg
		CADRDC  __reg
	}{
		CADCSRA: 0xe4, // CC-ADC Control and Status Register A
		CADCSRB: 0xe5, // CC-ADC Control and Status Register B
		CADICL:  0xe8, // CC-ADC Instantaneous Current
		CADICH:  0xe8, // CC-ADC Instantaneous Current
		CADAC3:  0xe3, // ADC Accumulate Current
		CADAC2:  0xe2, // ADC Accumulate Current
		CADAC1:  0xe1, // ADC Accumulate Current
		CADAC0:  0xe0, // ADC Accumulate Current
		CADRCC:  0xe6, // CC-ADC Regular Charge Current
		CADRDC:  0xe7, // CC-ADC Regular Discharge Current
	}

	// Cell Balancing
	CELL_BALANCING = struct {
		CBCR __reg
	}{
		CBCR: 0xf1, // Cell Balancing Control Register
	}

	// CPU Registers
	CPU = struct {
		SREG    __reg
		SPL     __reg
		SPH     __reg
		MCUCR   __reg
		MCUSR   __reg
		FOSCCAL __reg
		SMCR    __reg
		GPIOR2  __reg
		GPIOR1  __reg
		GPIOR0  __reg
		CCSR    __reg
		DIDR0   __reg
		PRR0    __reg
	}{
		SREG:    0x5f, // Status Register
		SPL:     0x5d, // Stack Pointer
		SPH:     0x5d, // Stack Pointer
		MCUCR:   0x55, // MCU Control Register
		MCUSR:   0x54, // MCU Status Register
		FOSCCAL: 0x66, // Fast Oscillator Calibration Value
		SMCR:    0x53, // Sleep Mode Control Register
		GPIOR2:  0x4b, // General Purpose IO Register 2
		GPIOR1:  0x4a, // General Purpose IO Register 1
		GPIOR0:  0x3e, // General Purpose IO Register 0
		CCSR:    0xc0, // Clock Control and Status Register
		DIDR0:   0x7e, // Digital Input Disable Register
		PRR0:    0x64, // Power Reduction Register 0
	}

	// Watchdog Timer
	WDT = struct {
		WDTCSR __reg
	}{
		WDTCSR: 0x60, // Watchdog Timer Control Register
	}

	// Timer/Counter, 8-bit
	TC8 = struct {
		TCCR0A __reg
		TCCR0B __reg
		TCNT0  __reg
		OCR0A  __reg
		OCR0B  __reg
		TIMSK0 __reg
		TIFR0  __reg
	}{
		TCCR0A: 0x44, // Timer/Counter0 Control Register
		TCCR0B: 0x45, // Timer/Counter0 Control Register
		TCNT0:  0x46, // Timer Counter 0
		OCR0A:  0x47, // Output compare Register A
		OCR0B:  0x48, // Output compare Register B
		TIMSK0: 0x6e, // Timer/Counter Interrupt Mask Register
		TIFR0:  0x35, // Timer/Counter Interrupt Flag register
	}

	// I/O Port
	PORT = struct {
		PORTA __reg
		DDRA  __reg
		PINA  __reg
		PORTB __reg
		DDRB  __reg
		PINB  __reg
		PORTC __reg
		PORTD __reg
		DDRD  __reg
		PIND  __reg
	}{
		PORTA: 0x22, // Port A Data Register
		DDRA:  0x21, // Port A Data Direction Register
		PINA:  0x20, // Port A Input Pins
		PORTB: 0x25, // Port B Data Register
		DDRB:  0x24, // Port B Data Direction Register
		PINB:  0x23, // Port B Input Pins
		PORTC: 0x28, // Port C Data Register
		PORTD: 0x2b, // Data Register, Port D
		DDRD:  0x2a, // Data Direction Register, Port D
		PIND:  0x29, // Input Pins, Port D
	}

	// Bootloader
	BOOT_LOAD = struct {
		SPMCSR __reg
	}{
		SPMCSR: 0x57, // Store Program Memory Control Register
	}

	// Two Wire Serial Interface
	TWI = struct {
		TWBCSR __reg
		TWAMR  __reg
		TWBR   __reg
		TWCR   __reg
		TWSR   __reg
		TWDR   __reg
		TWAR   __reg
	}{
		TWBCSR: 0xbe, // TWI Bus Control and Status Register
		TWAMR:  0xbd, // TWI (Slave) Address Mask Register
		TWBR:   0xb8, // TWI Bit Rate register
		TWCR:   0xbc, // TWI Control Register
		TWSR:   0xb9, // TWI Status Register
		TWDR:   0xbb, // TWI Data register
		TWAR:   0xba, // TWI (Slave) Address register
	}

	// Bandgap
	BANDGAP = struct {
		BGCRR __reg
		BGCCR __reg
	}{
		BGCRR: 0xd1, // Bandgap Calibration of Resistor Ladder
		BGCCR: 0xd0, // Bandgap Calibration Register
	}

	// EEPROM
	EEPROM = struct {
		EEARL __reg
		EEARH __reg
		EEDR  __reg
		EECR  __reg
	}{
		EEARL: 0x41, // EEPROM Address Register  Bytes
		EEARH: 0x41, // EEPROM Address Register  Bytes
		EEDR:  0x40, // EEPROM Data Register
		EECR:  0x3f, // EEPROM Control Register
	}
)

// Bitfields for FUSE: Fuses
const (
	// HIGH
	HIGH_OCDEN  = 0x2 // On-Chip Debug Enabled
	HIGH_JTAGEN = 0x1 // JTAG Interface Enabled

	// LOW
	LOW_WDTON     = 0x80 // Watchdog timer always on
	LOW_EESAVE    = 0x40 // Preserve EEPROM through the Chip Erase cycle
	LOW_BOOTSZ    = 0x30 // Select boot size
	LOW_BOOTRST   = 0x8  // Boot Reset vector Enabled
	LOW_SUT_CKSEL = 0x7  // Clock Selection
)

// Bitfields for LOCKBIT: Lockbits
const (
	// LOCKBIT
	LOCKBIT_LB   = 0x3  // Memory Lock
	LOCKBIT_BLB0 = 0xc  // Boot Loader Protection Mode
	LOCKBIT_BLB1 = 0x30 // Boot Loader Protection Mode
)

// Bitfields for ADC: Analog-to-Digital Converter
const (
	// VADMUX: The VADC multiplexer Selection Register
	VADMUX_VADMUX = 0xf // Analog Channel and Gain Selection Bits

	// VADCSR: The VADC Control and Status register
	VADCSR_VADEN   = 0x8 // VADC Enable
	VADCSR_VADSC   = 0x4 // VADC Satrt Conversion
	VADCSR_VADCCIF = 0x2 // VADC Conversion Complete Interrupt Flag
	VADCSR_VADCCIE = 0x1 // VADC Conversion Complete Interrupt Enable
)

// Bitfields for EXINT: External Interrupts
const (
	// EICRA: External Interrupt Control Register
	EICRA_ISC3 = 0xc0 // External Interrupt Sense Control 3 Bits
	EICRA_ISC2 = 0x30 // External Interrupt Sense Control 2 Bits
	EICRA_ISC1 = 0xc  // External Interrupt Sense Control 1 Bits
	EICRA_ISC0 = 0x3  // External Interrupt Sense Control 0 Bits

	// EIMSK: External Interrupt Mask Register
	EIMSK_INT = 0xf // External Interrupt Request 1 Enable

	// EIFR: External Interrupt Flag Register
	EIFR_INTF = 0xf // External Interrupt Flags

	// PCICR: Pin Change Interrupt Control Register
	PCICR_PCIE = 0x3 // Pin Change Interrupt Enables

	// PCIFR: Pin Change Interrupt Flag Register
	PCIFR_PCIF = 0x3 // Pin Change Interrupt Flags
)

// Bitfields for TC16: Timer/Counter, 16-bit
const (
	// TCCR1B: Timer/Counter1 Control Register B
	TCCR1B_CTC1 = 0x8 // Clear Timer/Counter on Compare Match
	TCCR1B_CS1  = 0x7 // Clock Select1 bits

	// TIMSK1: Timer/Counter Interrupt Mask Register
	TIMSK1_OCIE1A = 0x2 // Timer/Counter1 Output Compare Interrupt Enable
	TIMSK1_TOIE1  = 0x1 // Timer/Counter1 Overflow Interrupt Enable

	// TIFR1: Timer/Counter Interrupt Flag register
	TIFR1_OCF1A = 0x2 // Timer/Counter1 Output Compare Flag A
	TIFR1_TOV1  = 0x1 // Timer/Counter1 Overflow Flag

	// GTCCR: General Timer/Counter Control Register
	GTCCR_TSM     = 0x80 // Timer/Counter Synchronization Mode
	GTCCR_PSRSYNC = 0x1  // Prescaler Reset
)

// Bitfields for WAKEUP_TIMER: Wakeup Timer
const (
	// WUTCSR: Wake-up Timer Control Register
	WUTCSR_WUTIF = 0x80 // Wake-up Timer Interrupt Flag
	WUTCSR_WUTIE = 0x40 // Wake-up Timer Interrupt Enable
	WUTCSR_WUTCF = 0x20 // Wake-up timer Calibration Flag
	WUTCSR_WUTR  = 0x10 // Wake-up Timer Reset
	WUTCSR_WUTE  = 0x8  // Wake-up Timer Enable
	WUTCSR_WUTP  = 0x7  // Wake-up Timer Prescaler Bits
)

// Bitfields for BATTERY_PROTECTION: Battery Protection
const (
	// BPPLR: Battery Protection Parameter Lock Register
	BPPLR_BPPLE = 0x2 // Battery Protection Parameter Lock Enable
	BPPLR_BPPL  = 0x1 // Battery Protection Parameter Lock

	// BPCR: Battery Protection Control Register
	BPCR_DUVD = 0x8
	BPCR_SCD  = 0x4
	BPCR_DCD  = 0x2
	BPCR_CCD  = 0x1

	// CBPTR: Current Battery Protection Timing Register
	CBPTR_SCPT = 0xf0
	CBPTR_OCPT = 0xf

	// BPOCD: Battery Protection OverCurrent Detection Level Register
	BPOCD_DCDL = 0xf0
	BPOCD_CCDL = 0xf

	// BPSCD: Battery Protection Short-Circuit Detection Level Register
	BPSCD_SCDL = 0xf

	// BPDUV: Battery Protection Deep Under Voltage Register
	BPDUV_DUVT = 0x30
	BPDUV_DUDL = 0xf

	// BPIR: Battery Protection Interrupt Register
	BPIR_DUVIF = 0x80 // Deep Under-voltage Early Warning Interrupt Flag
	BPIR_COCIF = 0x40 // Charge Over-current Protection Activated Interrupt Flag
	BPIR_DOCIF = 0x20
	BPIR_SCIF  = 0x10
	BPIR_DUVIE = 0x8 // Deep Under-voltage Early Warning Interrupt Enable
	BPIR_COCIE = 0x4
	BPIR_DOCIE = 0x2
	BPIR_SCIE  = 0x1
)

// Bitfields for FET: FET Control
const (
	// FCSR
	FCSR_PWMOC  = 0x20 // Pulse Width Modulation of OC output
	FCSR_PWMOPC = 0x10 // Pulse Width Modulation Modulation of OPC output
	FCSR_CPS    = 0x8  // Current Protection Status
	FCSR_DFE    = 0x4  // Discharge FET Enable
	FCSR_CFE    = 0x2  // Charge FET Enable
	FCSR_PFD    = 0x1  // Precharge FET disable
)

// Bitfields for COULOMB_COUNTER: Coulomb Counter
const (
	// CADCSRA: CC-ADC Control and Status Register A
	CADCSRA_CADEN = 0x80 // When the CADEN bit is cleared (zero), the CC-ADC is disabled. When the CADEN bit is set (one), the CC-ADC will continuously measure the voltage drop over the external sense resistor RSENSE. In Power-down, only the Regular Current detection is active. In Power-off, the CC-ADC is always disabled.
	CADCSRA_CADUB = 0x20 // CC_ADC Update Busy
	CADCSRA_CADAS = 0x18 // CC_ADC Accumulate Current Select Bits
	CADCSRA_CADSI = 0x6  // The CADSI bits determine the current sampling interval for the Regular Current detection in Power-down mode. The actual settings remain to be determined.
	CADCSRA_CADSE = 0x1  // When the CADSE bit is written to one, the ongoing CC-ADC conversion is aborted, and the CC-ADC enters Regular Current detection mode.

	// CADCSRB: CC-ADC Control and Status Register B
	CADCSRB_CADACIE = 0x40
	CADCSRB_CADRCIE = 0x20 // Regular Current Interrupt Enable
	CADCSRB_CADICIE = 0x10 // CAD Instantenous Current Interrupt Enable
	CADCSRB_CADACIF = 0x4  // CC-ADC Accumulate Current Interrupt Flag
	CADCSRB_CADRCIF = 0x2  // CC-ADC Accumulate Current Interrupt Flag
	CADCSRB_CADICIF = 0x1  // CC-ADC Instantaneous Current Interrupt Flag
)

// Bitfields for CELL_BALANCING: Cell Balancing
const (
	// CBCR: Cell Balancing Control Register
	CBCR_CBE = 0xf // Cell Balancing Enables
)

// Bitfields for CPU: CPU Registers
const (
	// SREG: Status Register
	SREG_I = 0x80 // Global Interrupt Enable
	SREG_T = 0x40 // Bit Copy Storage
	SREG_H = 0x20 // Half Carry Flag
	SREG_S = 0x10 // Sign Bit
	SREG_V = 0x8  // Two's Complement Overflow Flag
	SREG_N = 0x4  // Negative Flag
	SREG_Z = 0x2  // Zero Flag
	SREG_C = 0x1  // Carry Flag

	// MCUCR: MCU Control Register
	MCUCR_JTD   = 0x80 // JTAG Disable
	MCUCR_PUD   = 0x10 // Pull-up disable
	MCUCR_IVSEL = 0x2  // Interrupt Vector Select
	MCUCR_IVCE  = 0x1  // Interrupt Vector Change Enable

	// MCUSR: MCU Status Register
	MCUSR_JTRF  = 0x10 // JTAG Reset Flag
	MCUSR_WDRF  = 0x8  // Watchdog Reset Flag
	MCUSR_BODRF = 0x4  // Brown-out Reset Flag
	MCUSR_EXTRF = 0x2  // External Reset Flag
	MCUSR_PORF  = 0x1  // Power-on reset flag

	// SMCR: Sleep Mode Control Register
	SMCR_SM = 0xe // Sleep Mode Select bits
	SMCR_SE = 0x1 // Sleep Enable

	// CCSR: Clock Control and Status Register
	CCSR_XOE = 0x2 // 32 kHz Crystal Oscillator Enable
	CCSR_ACS = 0x1 // Asynchronous Clock Select

	// PRR0: Power Reduction Register 0
	PRR0_PRTWI  = 0x8 // Power Reduction TWI
	PRR0_PRTIM1 = 0x4 // Power Reduction Timer/Counter1
	PRR0_PRTIM0 = 0x2 // Power Reduction Timer/Counter0
	PRR0_PRVADC = 0x1 // Power Reduction V-ADC
)

// Bitfields for WDT: Watchdog Timer
const (
	// WDTCSR: Watchdog Timer Control Register
	WDTCSR_WDIF = 0x80 // Watchdog Timeout Interrupt Flag
	WDTCSR_WDIE = 0x40 // Watchdog Timeout Interrupt Enable
	WDTCSR_WDP  = 0x27 // Watchdog Timer Prescaler Bits
	WDTCSR_WDCE = 0x10 // Watchdog Change Enable
	WDTCSR_WDE  = 0x8  // Watch Dog Enable
)

// Bitfields for TC8: Timer/Counter, 8-bit
const (
	// TCCR0A: Timer/Counter0 Control Register
	TCCR0A_COM0A = 0xc0 // Force Output Compare
	TCCR0A_COM0B = 0x30
	TCCR0A_WGM0  = 0x3 // Clock Select0 bits

	// TCCR0B: Timer/Counter0 Control Register
	TCCR0B_FOC0A = 0x80 // Force Output Compare
	TCCR0B_FOC0B = 0x40 // Waveform Generation Mode
	TCCR0B_WGM02 = 0x8
	TCCR0B_CS0   = 0x7 // Clock Select0 bits

	// OCR0A: Output compare Register A
	OCR0A_OCR0A = 0xff

	// OCR0B: Output compare Register B
	OCR0B_OCR0B = 0xff

	// TIMSK0: Timer/Counter Interrupt Mask Register
	TIMSK0_OCIE0B = 0x4 // Output Compare Interrupt Enable
	TIMSK0_OCIE0A = 0x2 // Output Compare Interrupt Enable
	TIMSK0_TOIE0  = 0x1 // Overflow Interrupt Enable

	// TIFR0: Timer/Counter Interrupt Flag register
	TIFR0_OCF0B = 0x4 // Output Compare Flag
	TIFR0_OCF0A = 0x2 // Output Compare Flag
	TIFR0_TOV0  = 0x1 // Overflow Flag
)

// Bitfields for BOOT_LOAD: Bootloader
const (
	// SPMCSR: Store Program Memory Control Register
	SPMCSR_SPMIE  = 0x80 // SPM Interrupt Enable
	SPMCSR_RWWSB  = 0x40 // Read While Write Section Busy
	SPMCSR_SIGRD  = 0x20 // Signature Row Read
	SPMCSR_RWWSRE = 0x10 // Read While Write section read enable
	SPMCSR_BLBSET = 0x8  // Boot Lock Bit Set
	SPMCSR_PGWRT  = 0x4  // Page Write
	SPMCSR_PGERS  = 0x2  // Page Erase
	SPMCSR_SPMEN  = 0x1  // Store Program Memory Enable
)

// Bitfields for TWI: Two Wire Serial Interface
const (
	// TWBCSR: TWI Bus Control and Status Register
	TWBCSR_TWBCIF = 0x80 // TWI Bus Connect/Disconnect Interrupt Flag
	TWBCSR_TWBCIE = 0x40 // TWI Bus Connect/Disconnect Interrupt Enable
	TWBCSR_TWBDT  = 0x6  // TWI Bus Disconnect Time-out Period
	TWBCSR_TWBCIP = 0x1  // TWI Bus Connect/Disconnect Interrupt Polarity

	// TWAMR: TWI (Slave) Address Mask Register
	TWAMR_TWAM = 0xfe

	// TWCR: TWI Control Register
	TWCR_TWINT = 0x80 // TWI Interrupt Flag
	TWCR_TWEA  = 0x40 // TWI Enable Acknowledge Bit
	TWCR_TWSTA = 0x20 // TWI Start Condition Bit
	TWCR_TWSTO = 0x10 // TWI Stop Condition Bit
	TWCR_TWWC  = 0x8  // TWI Write Collition Flag
	TWCR_TWEN  = 0x4  // TWI Enable Bit
	TWCR_TWIE  = 0x1  // TWI Interrupt Enable

	// TWSR: TWI Status Register
	TWSR_TWS  = 0xf8 // TWI Status
	TWSR_TWPS = 0x3  // TWI Prescaler

	// TWAR: TWI (Slave) Address register
	TWAR_TWA   = 0xfe // TWI (Slave) Address register Bits
	TWAR_TWGCE = 0x1  // TWI General Call Recognition Enable Bit
)

// Bitfields for BANDGAP: Bandgap
const (
	// BGCCR: Bandgap Calibration Register
	BGCCR_BGD  = 0x80 // Setting the BGD bit to one will disable the bandgap voltage reference. This bit must be cleared before enabling CC-ADC or V-ADC, and must remain unset while either ADC is enabled.
	BGCCR_BGCC = 0x3f // BG Calibration of PTAT Current Bits
)

// Bitfields for EEPROM: EEPROM
const (
	// EECR: EEPROM Control Register
	EECR_EEPM  = 0x30 // EEPROM Programming Mode Bits
	EECR_EERIE = 0x8  // EEPROM Ready Interrupt Enable
	EECR_EEMPE = 0x4  // EEPROM Master Programming Enable
	EECR_EEPE  = 0x2  // EEPROM Programming Enable
	EECR_EERE  = 0x1  // EEPROM Read Enable
)
