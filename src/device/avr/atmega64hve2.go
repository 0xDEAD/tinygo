// Automatically generated file. DO NOT EDIT.
// Generated by gen-device.py from ATmega64HVE2.atdf, see http://packs.download.atmel.com/

// +build avr,atmega64hve2

// Device information for the ATmega64HVE2.
//
package avr

// Magic type name for the compiler.
type __reg uint8

// Export this magic type name.
type RegValue = __reg

// Some information about this device.
const (
	DEVICE = "ATmega64HVE2"
	ARCH   = "AVR8"
	FAMILY = "megaAVR"
)

// Interrupts
const (
	IRQ_RESET        = 0  // External Pin, Power-on Reset, Brown-out Reset and Watchdog Reset
	IRQ_INT0         = 1  // External Interrupt 0
	IRQ_PCINT0       = 2  // Pin Change Interrupt 0
	IRQ_PCINT1       = 3  // Pin Change Interrupt 1
	IRQ_WDT          = 4  // Watchdog Timeout Interrupt
	IRQ_WAKEUP       = 5  // Wakeup Timer Overflow
	IRQ_TIMER1_IC    = 6  // Timer 1 Input capture
	IRQ_TIMER1_COMPA = 7  // Timer 1 Compare Match A
	IRQ_TIMER1_COMPB = 8  // Timer 1 Compare Match B
	IRQ_TIMER1_OVF   = 9  // Timer 1 overflow
	IRQ_TIMER0_IC    = 10 // Timer 0 Input Capture
	IRQ_TIMER0_COMPA = 11 // Timer 0 Comapre Match A
	IRQ_TIMER0_COMPB = 12 // Timer 0 Compare Match B
	IRQ_TIMER0_OVF   = 13 // Timer 0 Overflow
	IRQ_LIN_STATUS   = 14 // LIN Status Interrupt
	IRQ_LIN_ERROR    = 15 // LIN Error Interrupt
	IRQ_SPI_STC      = 16 // SPI Serial transfer complete
	IRQ_VADC_CONV    = 17 // Voltage ADC Instantaneous Conversion Complete
	IRQ_VADC_ACC     = 18 // Voltage ADC Accumulated Conversion Complete
	IRQ_CADC_CONV    = 19 // C-ADC Instantaneous Conversion Complete
	IRQ_CADC_REG_CUR = 20 // C-ADC Regular Current
	IRQ_CADC_ACC     = 21 // C-ADC Accumulated Conversion Complete
	IRQ_EE_READY     = 22 // EEPROM Ready
	IRQ_SPM          = 23 // SPM Ready
	IRQ_PLL          = 24 // PLL Lock Change Interrupt
	IRQ_max          = 24 // Highest interrupt number on this device.
)

// Peripherals
var (
	// Fuses
	FUSE = struct {
		LOW  __reg
		HIGH __reg
	}{
		LOW:  0x0,
		HIGH: 0x1,
	}

	// Lockbits
	LOCKBIT = struct {
		LOCKBIT __reg
	}{
		LOCKBIT: 0x0,
	}

	// Serial Peripheral Interface
	SPI = struct {
		SPCR __reg
		SPSR __reg
		SPDR __reg
	}{
		SPCR: 0x4c, // SPI Control Register
		SPSR: 0x4d, // SPI Status Register
		SPDR: 0x4e, // SPI Data Register
	}

	// EEPROM
	EEPROM = struct {
		EEARL __reg
		EEARH __reg
		EEDR  __reg
		EECR  __reg
	}{
		EEARL: 0x41, // EEPROM Read/Write Access
		EEARH: 0x41, // EEPROM Read/Write Access
		EEDR:  0x40, // EEPROM Data Register
		EECR:  0x3f, // EEPROM Control Register
	}

	// Timer/Counter, 16-bit
	TC16 = struct {
		TCCR1B __reg
		TCCR1A __reg
		TCNT1L __reg
		TCNT1H __reg
		OCR1A  __reg
		OCR1B  __reg
		TIMSK1 __reg
		TIFR1  __reg
		TCCR0B __reg
		TCCR0A __reg
		TCNT0L __reg
		TCNT0H __reg
		OCR0A  __reg
		OCR0B  __reg
		TIMSK0 __reg
		TIFR0  __reg
	}{
		TCCR1B: 0x81, // Timer/Counter1 Control Register B
		TCCR1A: 0x80, // Timer/Counter 1 Control Register A
		TCNT1L: 0x84, // Timer Counter 1  Bytes
		TCNT1H: 0x84, // Timer Counter 1  Bytes
		OCR1A:  0x88, // Output Compare Register 1A
		OCR1B:  0x89, // Output Compare Register B
		TIMSK1: 0x6f, // Timer/Counter Interrupt Mask Register
		TIFR1:  0x36, // Timer/Counter Interrupt Flag register
		TCCR0B: 0x45, // Timer/Counter0 Control Register B
		TCCR0A: 0x44, // Timer/Counter 0 Control Register A
		TCNT0L: 0x46, // Timer Counter 0  Bytes
		TCNT0H: 0x46, // Timer Counter 0  Bytes
		OCR0A:  0x48, // Output Compare Register 0A
		OCR0B:  0x49, // Output Compare Register B
		TIMSK0: 0x6e, // Timer/Counter Interrupt Mask Register
		TIFR0:  0x35, // Timer/Counter Interrupt Flag register
	}

	// I/O Port
	PORT = struct {
		PORTB __reg
		DDRB  __reg
		PINB  __reg
		PBOV  __reg
		PORTA __reg
		DDRA  __reg
		PINA  __reg
	}{
		PORTB: 0x25, // Port B Data Register
		DDRB:  0x24, // Port B Data Direction Register
		PINB:  0x23, // Port B Input Pins
		PBOV:  0xdc, // Port B Override
		PORTA: 0x22, // Port A Data Register
		DDRA:  0x21, // Port A Data Direction Register
		PINA:  0x20, // Port A Input Pins
	}

	// Bootloader
	BOOT_LOAD = struct {
		SPMCSR __reg
	}{
		SPMCSR: 0x57, // Store Program Memory Control and Status Register
	}

	// Analog-to-Digital Converter
	ADC = struct {
		ADSCSRA __reg
		ADSCSRB __reg
		ADCRA   __reg
		ADCRB   __reg
		ADCRC   __reg
		ADCRD   __reg
		ADCRE   __reg
		ADIFR   __reg
		ADIMR   __reg
		CADRCLL __reg
		CADRCLH __reg
		VADICL  __reg
		VADICH  __reg
		VADAC3  __reg
		VADAC2  __reg
		VADAC1  __reg
		VADAC0  __reg
		CADICL  __reg
		CADICH  __reg
		CADAC3  __reg
		CADAC2  __reg
		CADAC1  __reg
		CADAC0  __reg
	}{
		ADSCSRA: 0xe0, // ADC Synchronization Control and Status Register
		ADSCSRB: 0xe1, // ADC Synchronization Control and Status Register
		ADCRA:   0xe2, // ADC Control Register A
		ADCRB:   0xe3, // ADC Control Register B
		ADCRC:   0xe4, // ADC Control Register B
		ADCRD:   0xe5, // ADC Control Register D
		ADCRE:   0xe6, // ADC Control Register E
		ADIFR:   0xe7, // ADC Interrupt Flag Register
		ADIMR:   0xe8, // ADC Interrupt Mask Register
		CADRCLL: 0xe9, // CC-ADC Regulator Current Comparator Threshold Level
		CADRCLH: 0xe9, // CC-ADC Regulator Current Comparator Threshold Level
		VADICL:  0xf1, // V-ADC Instantaneous Conversion Result
		VADICH:  0xf1, // V-ADC Instantaneous Conversion Result
		VADAC3:  0xf6, // V-ADC Accumulated Conversion Result
		VADAC2:  0xf5, // V-ADC Accumulated Conversion Result
		VADAC1:  0xf4, // V-ADC Accumulated Conversion Result
		VADAC0:  0xf3, // V-ADC Accumulated Conversion Result
		CADICL:  0xeb, // C-ADC Instantaneous Conversion Result
		CADICH:  0xeb, // C-ADC Instantaneous Conversion Result
		CADAC3:  0xf0, // C-ADC Accumulated Conversion Result
		CADAC2:  0xef, // C-ADC Accumulated Conversion Result
		CADAC1:  0xee, // C-ADC Accumulated Conversion Result
		CADAC0:  0xed, // C-ADC Accumulated Conversion Result
	}

	// Bandgap
	BANDGAP = struct {
		BGCSRA __reg
		BGCRA  __reg
		BGCRB  __reg
		BGLR   __reg
	}{
		BGCSRA: 0xd1, // Bandgap Control and Status Register A
		BGCRA:  0xd3, // Band Gap Calibration Register A
		BGCRB:  0xd2, // Band Gap Calibration Register B
		BGLR:   0xd4, // Band Gap Lock Register
	}

	// Local Interconnect Network
	LINUART = struct {
		LINCR   __reg
		LINSIR  __reg
		LINENIR __reg
		LINERR  __reg
		LINBTR  __reg
		LINBRRL __reg
		LINBRRH __reg
		LINDLR  __reg
		LINIDR  __reg
		LINSEL  __reg
		LINDAT  __reg
	}{
		LINCR:   0xc0, // LIN Control Register
		LINSIR:  0xc1, // LIN Status and Interrupt Register
		LINENIR: 0xc2, // LIN Enable Interrupt Register
		LINERR:  0xc3, // LIN Error Register
		LINBTR:  0xc4, // LIN Bit Timing Register
		LINBRRL: 0xc5, // LIN Baud Rate Low Register
		LINBRRH: 0xc6, // LIN Baud Rate High Register
		LINDLR:  0xc7, // LIN Data Length Register
		LINIDR:  0xc8, // LIN Identifier Register
		LINSEL:  0xc9, // LIN Data Buffer Selection Register
		LINDAT:  0xca, // LIN Data Register
	}

	// CPU Registers
	CPU = struct {
		SREG     __reg
		SPL      __reg
		SPH      __reg
		MCUCR    __reg
		MCUSR    __reg
		SOSCCALA __reg
		SOSCCALB __reg
		PLLCSR   __reg
		SMCR     __reg
		GPIOR2   __reg
		GPIOR1   __reg
		GPIOR0   __reg
		DIDR0    __reg
		PRR0     __reg
		CLKPR    __reg
	}{
		SREG:     0x5f, // Status Register
		SPL:      0x5d, // Stack Pointer
		SPH:      0x5d, // Stack Pointer
		MCUCR:    0x55, // MCU Control Register
		MCUSR:    0x54, // MCU Status Register
		SOSCCALA: 0x66, // Slow Oscillator Calibration Register A
		SOSCCALB: 0x67, // Oscillator Calibration Register B
		PLLCSR:   0xd8, // PLL Control and Status Register
		SMCR:     0x53, // Sleep Mode Control Register
		GPIOR2:   0x4b, // General Purpose IO Register 2
		GPIOR1:   0x4a, // General Purpose IO Register 1
		GPIOR0:   0x3e, // General Purpose IO Register 0
		DIDR0:    0x7e, // Digital Input Disable Register
		PRR0:     0x64, // Power Reduction Register 0
		CLKPR:    0x61, // Clock Prescale Register
	}

	// External Interrupts
	EXINT = struct {
		EICRA  __reg
		EIMSK  __reg
		EIFR   __reg
		PCICR  __reg
		PCIFR  __reg
		PCMSK1 __reg
		PCMSK0 __reg
	}{
		EICRA:  0x69, // External Interrupt Control Register
		EIMSK:  0x3d, // External Interrupt Mask Register
		EIFR:   0x3c, // External Interrupt Flag Register
		PCICR:  0x68, // Pin Change Interrupt Control Register
		PCIFR:  0x3b, // Pin Change Interrupt Flag Register
		PCMSK1: 0x6c, // Pin Change Enable Mask Register 1
		PCMSK0: 0x6b, // Pin Change Enable Mask Register 0
	}

	// Watchdog Timer
	WDT = struct {
		WDTCSR __reg
		WDTCLR __reg
	}{
		WDTCSR: 0x60, // Watchdog Timer Control Register
		WDTCLR: 0x63, // Watchdog Timer Configuration Lock Register
	}

	// Wakeup Timer
	WAKEUP_TIMER = struct {
		WUTCSR __reg
	}{
		WUTCSR: 0x62, // Wake-up Timer Control and Status Register
	}
)

// Bitfields for FUSE: Fuses
const (
	// LOW
	LOW_WDTON   = 0x80 // Watch-dog Timer always on
	LOW_EESAVE  = 0x40 // Preserve EEPROM through the Chip Erase cycle
	LOW_SPIEN   = 0x20 // Serial program downloading (SPI) enabled
	LOW_BODEN   = 0x10 // Brown-out detection enabled
	LOW_CKDIV8  = 0x8  // Divide clock by 8
	LOW_SUT     = 0x6  // Select start-up time
	LOW_OSCSEL0 = 0x1  // Oscillator select

	// HIGH
	HIGH_DWEN    = 0x8 // Debug Wire enable
	HIGH_BOOTSZ  = 0x6 // Select Boot Size
	HIGH_BOOTRST = 0x1 // Boot Reset vector Enabled
)

// Bitfields for LOCKBIT: Lockbits
const (
	// LOCKBIT
	LOCKBIT_LB   = 0x3  // Memory Lock
	LOCKBIT_BLB0 = 0xc  // Boot Loader Protection Mode
	LOCKBIT_BLB1 = 0x30 // Boot Loader Protection Mode
)

// Bitfields for SPI: Serial Peripheral Interface
const (
	// SPCR: SPI Control Register
	SPCR_SPIE = 0x80 // SPI Interrupt Enable
	SPCR_SPE  = 0x40 // SPI Enable
	SPCR_DORD = 0x20 // Data Order
	SPCR_MSTR = 0x10 // Master/Slave Select
	SPCR_CPOL = 0x8  // Clock polarity
	SPCR_CPHA = 0x4  // Clock Phase
	SPCR_SPR  = 0x3  // SPI Clock Rate Selects

	// SPSR: SPI Status Register
	SPSR_SPIF  = 0x80 // SPI Interrupt Flag
	SPSR_WCOL  = 0x40 // Write Collision Flag
	SPSR_SPI2X = 0x1  // Double SPI Speed Bit
)

// Bitfields for EEPROM: EEPROM
const (
	// EECR: EEPROM Control Register
	EECR_EEPM  = 0x30
	EECR_EERIE = 0x8 // EEProm Ready Interrupt Enable
	EECR_EEMPE = 0x4 // EEPROM Master Write Enable
	EECR_EEPE  = 0x2 // EEPROM Write Enable
	EECR_EERE  = 0x1 // EEPROM Read Enable
)

// Bitfields for TC16: Timer/Counter, 16-bit
const (
	// TCCR1B: Timer/Counter1 Control Register B
	TCCR1B_CS = 0x7 // Clock Select1 bis

	// TCCR1A: Timer/Counter 1 Control Register A
	TCCR1A_TCW1  = 0x80 // Timer/Counter Width
	TCCR1A_ICEN1 = 0x40 // Input Capture Mode Enable
	TCCR1A_ICNC1 = 0x20 // Input Capture Noise Canceler
	TCCR1A_ICES1 = 0x10 // Input Capture Edge Select
	TCCR1A_ICS1  = 0x8  // Input Capture Select
	TCCR1A_WGM10 = 0x1  // Waveform Generation Mode

	// TIMSK1: Timer/Counter Interrupt Mask Register
	TIMSK1_ICIE1  = 0x8 // Timer/Counter n Input Capture Interrupt Enable
	TIMSK1_OCIE1B = 0x4 // Timer/Counter1 Output Compare B Interrupt Enable
	TIMSK1_OCIE1A = 0x2 // Timer/Counter1 Output Compare A Interrupt Enable
	TIMSK1_TOIE1  = 0x1 // Timer/Counter1 Overflow Interrupt Enable

	// TIFR1: Timer/Counter Interrupt Flag register
	TIFR1_ICF1  = 0x8 // Timer/Counter 1 Input Capture Flag
	TIFR1_OCF1B = 0x4 // Timer/Counter1 Output Compare Flag B
	TIFR1_OCF1A = 0x2 // Timer/Counter1 Output Compare Flag A
	TIFR1_TOV1  = 0x1 // Timer/Counter1 Overflow Flag

	// TCCR0B: Timer/Counter0 Control Register B
	TCCR0B_CS02 = 0x4 // Clock Select0 bit 2
	TCCR0B_CS01 = 0x2 // Clock Select0 bit 1
	TCCR0B_CS00 = 0x1 // Clock Select0 bit 0

	// TCCR0A: Timer/Counter 0 Control Register A
	TCCR0A_TCW0  = 0x80 // Timer/Counter Width
	TCCR0A_ICEN0 = 0x40 // Input Capture Mode Enable
	TCCR0A_ICNC0 = 0x20 // Input Capture Noise Canceler
	TCCR0A_ICES0 = 0x10 // Input Capture Edge Select
	TCCR0A_ICS0  = 0x8  // Input Capture Select
	TCCR0A_WGM00 = 0x1  // Waveform Generation Mode

	// TIMSK0: Timer/Counter Interrupt Mask Register
	TIMSK0_ICIE0  = 0x8 // Timer/Counter n Input Capture Interrupt Enable
	TIMSK0_OCIE0B = 0x4 // Timer/Counter0 Output Compare B Interrupt Enable
	TIMSK0_OCIE0A = 0x2 // Timer/Counter0 Output Compare A Interrupt Enable
	TIMSK0_TOIE0  = 0x1 // Timer/Counter0 Overflow Interrupt Enable

	// TIFR0: Timer/Counter Interrupt Flag register
	TIFR0_ICF0  = 0x8 // Timer/Counter 0 Input Capture Flag
	TIFR0_OCF0B = 0x4 // Timer/Counter0 Output Compare Flag B
	TIFR0_OCF0A = 0x2 // Timer/Counter0 Output Compare Flag A
	TIFR0_TOV0  = 0x1 // Timer/Counter0 Overflow Flag
)

// Bitfields for PORT: I/O Port
const (
	// PBOV: Port B Override
	PBOV_PBOVCE = 0x80 // Port B Override Change Enable
	PBOV_PBOE3  = 0x8  // Port B Override Enable 3
	PBOV_PBOE0  = 0x1  // Port B Override Enable 0
)

// Bitfields for BOOT_LOAD: Bootloader
const (
	// SPMCSR: Store Program Memory Control and Status Register
	SPMCSR_SPMIE  = 0x80 // SPM Interrupt Enable
	SPMCSR_RWWSB  = 0x40 // Read-While-Write Section Busy
	SPMCSR_SIGRD  = 0x20 // Signature Row Read
	SPMCSR_RWWSRE = 0x10 // Read-While-Write Section Read Enable
	SPMCSR_LBSET  = 0x8  // Lock Bit Set
	SPMCSR_PGWRT  = 0x4  // Page Write
	SPMCSR_PGERS  = 0x2  // Page Erase
	SPMCSR_SPMEN  = 0x1  // Store Program Memory Enable
)

// Bitfields for ADC: Analog-to-Digital Converter
const (
	// ADSCSRA: ADC Synchronization Control and Status Register
	ADSCSRA_SBSY = 0x4 // Synchronization Busy
	ADSCSRA_SCMD = 0x3 // Synchronization Command

	// ADSCSRB: ADC Synchronization Control and Status Register
	ADSCSRB_VADICPS = 0x40 // V-ADC Instantaneous Conversion Polarity Status
	ADSCSRB_VADACRB = 0x20 // VADAC Data Read Out Busy
	ADSCSRB_VADICRB = 0x10 // VADIC Data Read Out Busy
	ADSCSRB_CADICPS = 0x4  // C-ADC Instantaneous Conversion Polarity Status
	ADSCSRB_CADACRB = 0x2  // CADAC Data Read Out Busy
	ADSCSRB_CADICRB = 0x1  // CADIC Data Read Out Busy

	// ADCRA: ADC Control Register A
	ADCRA_ADPSEL = 0x8 // ADC Polarity Select
	ADCRA_ADCMS  = 0x6 // C-ADC Chopper Mode Select
	ADCRA_CKSEL  = 0x1 // Sampling Clock Select

	// ADCRB: ADC Control Register B
	ADCRB_ADIDES = 0x18 // Instantaneous Decimation Ratio Select
	ADCRB_ADADES = 0x7  // Accumulated Decimation Ratio Select

	// ADCRC: ADC Control Register B
	ADCRC_CADEN  = 0x80 // C-ADC Enable
	ADCRC_CADRCM = 0x30 // C-ADC Regular Current Comparator Mode
	ADCRC_CADRCT = 0xf  // C-ADC Regular Current Count Threshold

	// ADCRD: ADC Control Register D
	ADCRD_CADG    = 0x38 // C-ADC Gain
	ADCRD_CADPDM  = 0x6  // C-ADC Pin Diagnostics Mode
	ADCRD_CADDSEL = 0x1  // C-ADC Diagnostics Channel Select

	// ADCRE: ADC Control Register E
	ADCRE_VADEN   = 0x80 // V-ADC Enable
	ADCRE_VADREFS = 0x20 // V-ADC Reference Select
	ADCRE_VADPDM  = 0x18 // V-ADC Pin Diagnostics Mode
	ADCRE_VADMUX  = 0x7  // V-ADC Channel Select

	// ADIFR: ADC Interrupt Flag Register
	ADIFR_VADACIF = 0x20 // V-ADC Accumulated Voltage Interrupt Flag
	ADIFR_VADICIF = 0x10 // V-DAC Instantaneous Voltage Interrupt Flag
	ADIFR_CADRCIF = 0x4  // C-ADC Regulator Current Interrupt Flag
	ADIFR_CADACIF = 0x2  // C-ADC Accumulated Current Interrupt Flag
	ADIFR_CADICIF = 0x1  // C-ADC Instantaneous Current Interrupt Flag

	// ADIMR: ADC Interrupt Mask Register
	ADIMR_VADACIE = 0x20 // V-ADC Accumulated Voltage Interrupt Enable
	ADIMR_VADICIE = 0x10 // V-DAC Instantaneous Voltage Interrupt Enable
	ADIMR_CADRCIE = 0x4  // C-ADC Regulator Current Interrupt Enable
	ADIMR_CADACIE = 0x2  // C-ADC Accumulated Current Interrupt Enable
	ADIMR_CADICIE = 0x1  // C-ADC Instantaneous Current Interrupt Enable
)

// Bitfields for BANDGAP: Bandgap
const (
	// BGCSRA: Bandgap Control and Status Register A
	BGCSRA_BGSC = 0x7 // Band Gap Sample Configuration

	// BGCRA: Band Gap Calibration Register A
	BGCRA_BGCN = 0xff // Band Gap Calibration Nominal

	// BGCRB: Band Gap Calibration Register B
	BGCRB_BGCL = 0xff // Band Gap Calibration Linear

	// BGLR: Band Gap Lock Register
	BGLR_BGPLE = 0x2 // Band Gap Lock Enable
	BGLR_BGPL  = 0x1 // Band Gap Lock
)

// Bitfields for LINUART: Local Interconnect Network
const (
	// LINCR: LIN Control Register
	LINCR_LSWRES = 0x80 // Software Reset
	LINCR_LIN13  = 0x40 // LIN Standard
	LINCR_LCONF  = 0x30 // LIN Configuration bits
	LINCR_LENA   = 0x8  // LIN or UART Enable
	LINCR_LCMD   = 0x7  // LIN Command and Mode bits

	// LINSIR: LIN Status and Interrupt Register
	LINSIR_LIDST = 0xe0 // Identifier Status bits
	LINSIR_LBUSY = 0x10 // Busy Signal
	LINSIR_LERR  = 0x8  // Error Interrupt
	LINSIR_LIDOK = 0x4  // Identifier Interrupt
	LINSIR_LTXOK = 0x2  // Transmit Performed Interrupt
	LINSIR_LRXOK = 0x1  // Receive Performed Interrupt

	// LINENIR: LIN Enable Interrupt Register
	LINENIR_LENERR  = 0x8 // Enable Error Interrupt
	LINENIR_LENIDOK = 0x4 // Enable Identifier Interrupt
	LINENIR_LENTXOK = 0x2 // Enable Transmit Performed Interrupt
	LINENIR_LENRXOK = 0x1 // Enable Receive Performed Interrupt

	// LINERR: LIN Error Register
	LINERR_LABORT = 0x80 // Abort Flag
	LINERR_LTOERR = 0x40 // Frame Time Out Error Flag
	LINERR_LOVERR = 0x20 // Overrun Error Flag
	LINERR_LFERR  = 0x10 // Framing Error Flag
	LINERR_LSERR  = 0x8  // Synchronization Error Flag
	LINERR_LPERR  = 0x4  // Parity Error Flag
	LINERR_LCERR  = 0x2  // Checksum Error Flag
	LINERR_LBERR  = 0x1  // Bit Error Flag

	// LINBTR: LIN Bit Timing Register
	LINBTR_LDISR = 0x80 // Disable Bit Timing Resynchronization
	LINBTR_LBT   = 0x3f // LIN Bit Timing bits

	// LINBRRL: LIN Baud Rate Low Register
	LINBRRL_LDIV = 0xff

	// LINBRRH: LIN Baud Rate High Register
	LINBRRH_LDIV = 0xf

	// LINDLR: LIN Data Length Register
	LINDLR_LTXDL = 0xf0 // LIN Transmit Data Length bits
	LINDLR_LRXDL = 0xf  // LIN Receive Data Length bits

	// LINIDR: LIN Identifier Register
	LINIDR_LP  = 0xc0 // Parity bits
	LINIDR_LID = 0x3f // Identifier bit 5 or Data Length bits

	// LINSEL: LIN Data Buffer Selection Register
	LINSEL_LAINC = 0x8 // Auto Increment of Data Buffer Index (Active Low)
	LINSEL_LINDX = 0x7 // FIFO LIN Data Buffer Index bits

	// LINDAT: LIN Data Register
	LINDAT_LDATA = 0xff
)

// Bitfields for CPU: CPU Registers
const (
	// SREG: Status Register
	SREG_I = 0x80 // Global Interrupt Enable
	SREG_T = 0x40 // Bit Copy Storage
	SREG_H = 0x20 // Half Carry Flag
	SREG_S = 0x10 // Sign Bit
	SREG_V = 0x8  // Two's Complement Overflow Flag
	SREG_N = 0x4  // Negative Flag
	SREG_Z = 0x2  // Zero Flag
	SREG_C = 0x1  // Carry Flag

	// MCUCR: MCU Control Register
	MCUCR_CKOE  = 0x20 // Clock Output Enable
	MCUCR_PUD   = 0x10 // Pull-up disable
	MCUCR_IVSEL = 0x2  // Interrupt Vector Select
	MCUCR_IVCE  = 0x1  // Interrupt Vector Change Enable

	// MCUSR: MCU Status Register
	MCUSR_OCDRF = 0x10 // OCD Reset Flag
	MCUSR_WDRF  = 0x8  // Watchdog Reset Flag
	MCUSR_BODRF = 0x4  // Brown-out Reset Flag
	MCUSR_EXTRF = 0x2  // External Reset Flag
	MCUSR_PORF  = 0x1  // Power-on reset flag

	// PLLCSR: PLL Control and Status Register
	PLLCSR_SWEN   = 0x20 // PLL Software Enable
	PLLCSR_LOCK   = 0x10 // PLL Lock
	PLLCSR_PLLCIF = 0x2  // PLL Lock Change Interrupt Flag
	PLLCSR_PLLCIE = 0x1  // PLL Lock Change Interrupt Enable

	// SMCR: Sleep Mode Control Register
	SMCR_SM = 0xe // Sleep Mode Select bits
	SMCR_SE = 0x1 // Sleep Enable

	// DIDR0: Digital Input Disable Register
	DIDR0_PA1DID = 0x2 // When this bit is written logic one, the digital input buffer of the corresponding V_ADC pin is disabled.
	DIDR0_PA0DID = 0x1 // When this bit is written logic one, the digital input buffer of the corresponding V_ADC pin is disabled.

	// PRR0: Power Reduction Register 0
	PRR0_PRLIN  = 0x8 // Power Reduction LIN UART Interface
	PRR0_PRSPI  = 0x4 // Power reduction SPI
	PRR0_PRTIM1 = 0x2 // Power Reduction Timer/Counter1
	PRR0_PRTIM0 = 0x1 // Power Reduction Timer/Counter0

	// CLKPR: Clock Prescale Register
	CLKPR_CLKPCE = 0x80 // Clock Prescaler Change Enable
	CLKPR_CLKPS  = 0x3  // Clock Prescaler Select Bits
)

// Bitfields for EXINT: External Interrupts
const (
	// EICRA: External Interrupt Control Register
	EICRA_ISC01 = 0x2 // External Interrupt Sense Control 0 Bit 1
	EICRA_ISC00 = 0x1 // External Interrupt Sense Control 0 Bit 0

	// EIMSK: External Interrupt Mask Register
	EIMSK_INT0 = 0x1 // External Interrupt Request 0 Enable

	// EIFR: External Interrupt Flag Register
	EIFR_INTF0 = 0x1 // External Interrupt Flag 0

	// PCICR: Pin Change Interrupt Control Register
	PCICR_PCIE = 0x3 // Pin Change Interrupt Enables

	// PCIFR: Pin Change Interrupt Flag Register
	PCIFR_PCIF = 0x3 // Pin Change Interrupt Flags
)

// Bitfields for WDT: Watchdog Timer
const (
	// WDTCSR: Watchdog Timer Control Register
	WDTCSR_WDIF = 0x80 // Watchdog Timeout Interrupt Flag
	WDTCSR_WDIE = 0x40 // Watchdog Timeout Interrupt Enable
	WDTCSR_WDP  = 0x27 // Watchdog Timer Prescaler Bits
	WDTCSR_WDCE = 0x10 // Watchdog Change Enable
	WDTCSR_WDE  = 0x8  // Watch Dog Enable

	// WDTCLR: Watchdog Timer Configuration Lock Register
	WDTCLR_WDCL  = 0x6 // Watchdog Timer Comfiguration Lock bits
	WDTCLR_WDCLE = 0x1 // Watchdog Timer Comfiguration Lock Enable
)

// Bitfields for WAKEUP_TIMER: Wakeup Timer
const (
	// WUTCSR: Wake-up Timer Control and Status Register
	WUTCSR_WUTIF = 0x80 // Wake-up Timer Interrupt Flag
	WUTCSR_WUTIE = 0x40 // Wake-up Timer Interrupt Enable
	WUTCSR_WUTR  = 0x10 // Wake-up Timer Reset
	WUTCSR_WUTE  = 0x8  // Wake-up Timer Enable
	WUTCSR_WUTP  = 0x7  // Wake-up Timer Prescaler Bits
)
